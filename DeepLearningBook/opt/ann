'''
!!!------------------------------------- Abhishek Kumar-------------------------------!!!
!!!---------------------------------------24/10/2017----------------------------------!!!
!!!--------------------------------Nueral network library V 2.0 ----------------------!!!
'''


# imports-----------------------------------------------------------------------------------------------
import numpy as np
import h5py
import matplotlib.pyplot as plt




class NN:
    def __init__(self, layers, actis, hyperparams):
        np.random.seed(3)
        self.layers = layers
        self.actis = actis
        self.parameters = {}
        self.L = len(layers)  # length/ depth of the network
        # NOTE : Representing w's and b's with dimensions, rows -> (i)th layer size, columns -> (i-1)th layer size:
        for l in range(1, self.L):
            self.parameters['W' + str(l)] = np.random.randn(self.layers[l], self.layers[l - 1])
            self.parameters['b' + str(l)] = np.zeros((self.layers[l], 1))

        self.learning_rate = hyperparams['learning_rate']
        self.streg = hyperparams['structural_reg']
        self.stld = hyperparams['structural_lambda']
        self.ld = hyperparams['lambda']
        self.reg = hyperparams['regulization']
        self.estop = hyperparams['early_stop']
        self.max_passes = hyperparams['max_passes']
        self.num_epochs = hyperparams['max_epochs']
        self.print_cost = hyperparams['display_cost']
        self.printerval = hyperparams['cost_interval']
        self.plotcost = hyperparams['plot_cost']

    # defining activation functions and gradients w.r.t input: ---------------------------------------------
    def relu(self, z):  # in actual its a leaky relu performs better
        o = z * (z > 0) - 0.001 * (z < 0) * z
        return o, z

    def drelu(self, dA, z):  # in actual its a diff leaky relu performs better
        o = (z > 0) * 1 - 0.001 * (z <= 0)
        return o * dA

    def sigmoid(self, z):
        o = 1 / (1 + np.exp(-z))
        return o, z

    def dsigmoid(self, dA, z):
        o = 1 / (1 + np.exp(-z))
        return (o * (1 - o)) * dA


    # Linear Forward for calculating linear part of forward prop-----------------------------------------------
    def linfwd(self, A, W, b):
        Z = np.dot(W, A) + b
        assert (Z.shape == (W.shape[0], A.shape[1]))
        cache = (A, W, b)
        return Z, cache

    # Linear Activation Forward for calculating activation part of forward prop------------------------------------
    def linactfwd(self, A_prev, W, b, act):
        if act == "sigmoid":
            # Inputs: "A_prev, W, b". Outputs: "A, activation_cache".
            Z, linear_cache = self.linfwd(A_prev, W, b)
            A, activation_cache = self.sigmoid(Z)
        elif act == "relu":
            # Inputs: "A_prev, W, b". Outputs: "A, activation_cache".
            Z, linear_cache = self.linfwd(A_prev, W, b)
            A, activation_cache = self.relu(Z)
        assert (A.shape == (W.shape[0], A_prev.shape[1]))
        cache = (linear_cache, activation_cache)  # cache = ((input, W, b), (output, z)) for that layer
        return A, cache

    # for implementation of dropout we need to modify the layer calculation rules:
    def lmodelfwd(self, X):
        caches = []
        A = X
        L = len(self.parameters) // 2  # number of layers in the neural network L = len(w's) + len(b's) = 2xdepth
        masks = {}
        for l in range(1, L):
            A_prev = A
            if (self.streg == 'dout'):
                A, cache = self.linactfwd(A_prev, self.parameters['W' + str(l)], self.parameters['b' + str(l)], self.actis[l])
                mask = np.random.binomial(1, self.stld, size=A.shape) / stld
                masks['m' + str(l)] = mask
            else:
                A, cache = self.linactfwd(A_prev, self.parameters['W' + str(l)], self.parameters['b' + str(l)], self.actis[l])
            caches.append(cache)
        AL, cache = self.linactfwd(A, self.parameters['W' + str(L)], self.parameters['b' + str(L)], self.actis[L])
        caches.append(cache)
        return AL, caches, masks

    # Linear Backward computing the gradients for current node --------------------------------------------
    def linback(self, dZ, cache):
        A_prev, W, b = cache
        m = A_prev.shape[1]
        dW = np.dot(dZ, A_prev.T) / m
        db = np.sum(dZ, axis=1, keepdims=True) / m
        dA_prev = np.dot(W.T, dZ)
        assert (dA_prev.shape == A_prev.shape)
        assert (dW.shape == W.shape)
        assert (db.shape == b.shape)
        return dA_prev, dW, db

    # Linear Activation backward computing prev layer grad along with update values------------------------
    def linactback(self, dA, cache, act):
        linear_cache, activation_cache = cache
        if act == "relu":
            dZ = self.drelu(dA, activation_cache)
            dA_prev, dW, db = self.linback(dZ, linear_cache)
        elif act == "sigmoid":
            dZ = self.dsigmoid(dA, activation_cache)
            dA_prev, dW, db = self.linback(dZ, linear_cache)
        return dA_prev, dW, db

    def lmodelback(self, AL, Y, caches, masks):
        grads = {}
        L = len(caches)  # the number of layers
        m = AL.shape[1]
        n = AL.shape[0]
        Y = Y.reshape(AL.shape)
        en = 10 ** -20  # a very small number
        try:
            dAL = (-np.divide(Y, AL) + np.divide(1 - Y, 1 - AL)) / m
        except ZeroDivisionError:
            dAL = (-np.divide(Y, AL + np.sign(AL) * en) + np.divide(1 - Y, 1 - AL + np.sign(1 - AL) * en)) / m
        current_cache = caches[L - 1]
        grads["dA" + str(L)], grads["dW" + str(L)], grads["db" + str(L)] = self.linactback(dAL, current_cache, self.actis[L])
        grads["dA" + str(L)] = grads["dA" + str(L)] * masks['m' + str(L - 1)]
        for l in reversed(range(L - 1)):
            # lth layer: (RELU -> LINEAR) gradients.
            current_cache = caches[l]
            if (self.streg == 'dout' and l > 1):
                dA_prev_temp, dW_temp, db_temp = self.linactback(grads["dA" + str(l + 2)], current_cache, self.actis[l+1])
                dA_prev_temp = dA_prev_temp * masks['m' + str(l)]
            else:
                dA_prev_temp, dW_temp, db_temp = self.linactback(grads["dA" + str(l + 2)], current_cache, self.actis[l+1])
            grads["dA" + str(l + 1)] = dA_prev_temp
            grads["dW" + str(l + 1)] = dW_temp
            grads["db" + str(l + 1)] = db_temp
        return grads

    # defining new update rules:
    def updateparams(self, grads, ldbym):
        L = len(self.parameters) // 2  # number of layers in the neural network
        # Update rule for each parameter. Use a for loop.
        for l in range(L):
            if (self.reg == 'l2reg'):
                self.parameters["W" + str(l + 1)] = (1 - ldbym) * self.parameters["W" + str(l + 1)] - self.learning_rate * grads[
                    "dW" + str(l + 1)]
            elif (self.reg == 'l1reg'):
                self.parameters["W" + str(l + 1)] = self.parameters["W" + str(l + 1)] - self.learning_rate * grads[
                    "dW" + str(l + 1)] - ldbym * np.sign(self.parameters["W" + str(l + 1)])
            else:
                self.parameters["W" + str(l + 1)] = self.parameters["W" + str(l + 1)] - self.learning_rate * grads["dW" + str(l + 1)]

            self.parameters["b" + str(l + 1)] = self.parameters["b" + str(l + 1)] - self.learning_rate * grads["db" + str(l + 1)]
        return self.parameters

    # defining new cost function
    def compcost(self, AL, Y):
        m = Y.shape[1]  # training batch size
        # cross entropy cost
        cost = (-1 / m) * (np.dot(Y, np.log(AL).T) + np.dot(1 - Y, np.log(1 - AL).T))
        cost = np.squeeze(cost)
        L = len(self.parameters) // 2  # number of layers in the neural network
        if (self.reg == 'l2reg'):
            for l in range(L):
                cost = cost + self.ld * np.sum(np.sum(self.parameters["W" + str(l + 1)] ** 2)) / 2 / m
        elif (self.reg == 'l1reg'):
            alpha = 10 ** -20
            for l in range(L):
                cost = cost + self.ld * np.sum(np.sum(np.sqrt(self.parameters["W" + str(l + 1)] ** 2 + alpha))) / m
        else:
            pass
        return cost




    # defining ntraining part..................
    def train(self, X, Y, xval, yval):
        np.random.seed(1)
        costs = []  # keep track of cost

        [n, m] = X.shape

        valcst = 10 ** 5
        passes = 0
        oparams = parameters

        for i in range(0, num_epochs):

            a3, caches, masks = self.lmodelfwd(X)

            if (self.plotcost):
                cost = self.compcost(a3, Y)

            grads = self.lmodelback(a3, Y, caches, masks)

            self.parameters = self.updateparams(grads, self.ld / m)

            if (self.plotcost):
                if self.print_cost and i % self.printerval == 0:
                    print("Cost after iteration %i: %f" % (i, cost))
                if i % self.printerval == 0:
                    costs.append(cost)

            if (self.estop and i % 10 == 0):
                yvald = self.predict(xval)
                vcost = self.compcost(yvald, yval)
                if (vcost < valcst):
                    passes = 0
                    valcst = vcost
                    oparams = self.parameters
                else:
                    if (passes > self.max_passes):
                        self.parameters = oparams
                        print("breaking the loop........")
                        break
                    else:
                        passes = passes + 1

        # plot the cost
        if (self.plotcost):
            plt.plot(np.squeeze(costs))
            plt.ylabel('cost')
            plt.xlabel('iterations /' + str(self.printerval))
            plt.title("Learning rate =" + str(self.learning_rate))
            plt.show()

        return self.parameters

    # Function to predict the output----------------------------------------------------------------------------------
    def predict(self, X):
        AL, caches, masks = self.lmodelfwd(X)
        return AL
